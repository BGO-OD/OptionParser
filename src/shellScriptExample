#!/bin/bash

tmpfile=$(mktemp)
trap "rm $tmpfile" EXIT
set > $tmpfile


. <(shellScriptOptionParser "$(cd "$(dirname "$0")"; echo "$(pwd)/$(basename "$0")")" "$@"<<EOF
A shell script to demonstrate option parsing with the shellScriptOptionParser
the input so shellScriptOptionParser up to the line containing only options:
will be used as description of the script,
then follow the options with the optionn type (int, bool, string) first,
then the short option character, then the long name,
a description up to the end of the line.
Use - as short name if no short name is desired.
options:
export int n number some number
range $(seq -s ' ' 4 10 100)
uint p pid the pid of the process
default $$
export string - test a test
range bla
range blubb
bool v verbose be verbose
list l list list of strings
default string1
default string2
seconds s secs a time range
date d date a time point
minusMinusSpecialTreatment ParametersAfterMinuMinus
minUnusedParameters 2
maxUnusedParameters 4
trailer:
It is also possible to add text to the help output after the list of options.
EOF
test $? != 0 && echo exit
)
if [ $verbose = "true" ]; then
		echo "Number of leftover parameters is $#, parameters are $*"
else 
		echo $# $*
fi

# show which shell variables were set since startup:
diff $tmpfile <(set) | grep '^>' | grep -v '> _='
[ $verbose = "true" ] && echo "exported variables:"
diff $tmpfile <(bash -c set) | grep '^>' | grep -v '> _=' | grep -v BASH_ | grep -v PPID | grep -v SHLVL

if [ $pid -ne $$ ]; then
		echo "you were fooled! you can't change the pid of this process."
fi

